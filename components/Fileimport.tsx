import "./Fileimport.css";
import React, { useRef, useState } from "react";
import * as XLSX from "xlsx";
import Button from "./Button";
import { RowCommercialOfferSecondForm } from "../type";
import SecondCommercialOfferForm from "./SecondCommercialOfferForm";

interface FileImportProps {
  clearMode?: () => void;
  showBackButton?: boolean;
}

function Fileimport({ clearMode, showBackButton = true }: FileImportProps) {
  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const xmlInputRef = useRef<HTMLInputElement | null>(null);
  const [onParsed, setOnParsed] = useState<RowCommercialOfferSecondForm[] | null>(null);
  const [taxPercent, setTaxPercent] = useState<string | number>("20");

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    if (fileInputRef.current) fileInputRef.current.value = "";
    const reader = new FileReader();
    reader.onload = (evt) => {
      const data = evt.target?.result;
      if (!data) return;

      const workbook = XLSX.read(data, { type: "array" });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];

      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      const rows: any[][] = XLSX.utils.sheet_to_json(sheet, { header: 1, raw: false });

      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
      let headerRowIndex = -1;
      let headers: string[] = [];
      for (let i = 0; i < rows.length; i++) {
        const row = rows[i].map((cell: any) => cell?.toString().trim());
        if (row.some((cell: string) => ["–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç"].includes(cell))) {
          headerRowIndex = i;
          headers = row;
          break;
        }
      }

      if (headerRowIndex === -1) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏");
        return;
      }

      // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      const dataRows = rows.slice(headerRowIndex + 1);

      const parsed: RowCommercialOfferSecondForm[] = dataRows.map((row: any[]) => {
        const rowObj: any = {};
        headers.forEach((header, idx) => {
          rowObj[header.trim()] = row[idx] ?? "";
        });

        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–∏–Ω–æ–Ω–∏–º–æ–≤
        const getCell = (keys: string[]) => {
          for (const k of keys) {
            const foundKey = Object.keys(rowObj).find((rk) => rk.trim().toLowerCase() === k.toLowerCase());
            if (foundKey && rowObj[foundKey] !== undefined && rowObj[foundKey] !== null) {
              return rowObj[foundKey].toString();
            }
          }
          return "";
        };

        // –ß–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        return {
          name: getCell(["–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç"]),
          unit: getCell(["–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è", "–ï–¥. –∏–∑–º."]),
          quantity: getCell(["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–ª-–≤–æ"]) || "0",
          salary: getCell(["–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞", "–û—Å–Ω. –∑–∞—Ä–ø–ª–∞—Ç–∞"]) || "0",
          material: getCell(["–ú–∞—Ç–µ—Ä–∏–∞–ª", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"]) || "0",
          machine: getCell(["–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –º–∞—à–∏–Ω", "–≠–∫—Å–ø–ª. –º–∞—à–∏–Ω"]) || "0",
        };
      });

      setOnParsed(parsed);
    };

    reader.readAsArrayBuffer(file);
  };

  const importFromXML = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();

    reader.onload = (e) => {
      const buffer = e.target?.result as ArrayBuffer;

      // —á–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º encoding
      const head = new TextDecoder("utf-8").decode(buffer.slice(0, 200));
      const encodingMatch = head.match(/encoding="([^"]+)"/i);
      const encoding = encodingMatch ? encodingMatch[1].toLowerCase() : "utf-8";

      let content: string;

      try {
        // –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏–∑ XML
        const decoder = new TextDecoder(encoding as any, { fatal: false });
        content = decoder.decode(buffer);
      } catch (e) {
        try {
          // –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –ø—Ä–æ–±—É–µ–º windows-1251
          const decoder = new TextDecoder("windows-1251" as any, { fatal: false });
          content = decoder.decode(buffer);
        } catch {
          // –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –Ω–∞ utf-8
          content = new TextDecoder("utf-8").decode(buffer);
        }
      }

      // –ø–∞—Ä—Å–∏–º XML
      const parser = new DOMParser();
      const xmlDoc = parser.parseFromString(content, "application/xml");

      const positions = Array.from(xmlDoc.getElementsByTagName("Position"));
      const importedRows: RowCommercialOfferSecondForm[] = positions.map((pos) => {
        const name = pos.getAttribute("Caption") || "";
        const unit = pos.getAttribute("Units") || "";
        const quantity = pos.getElementsByTagName("Quantity")[0]?.getAttribute("Result") || "0";

        const priceBase = pos.getElementsByTagName("PriceBase")[0];
        const salary = priceBase?.getAttribute("PZ") || "0";
        const material = priceBase?.getAttribute("MT") || "0";
        const machine = priceBase?.getAttribute("OZ") || "0";

        return {
          name,
          unit,
          quantity,
          salary,
          material,
          machine,
        };
      });

      setOnParsed(importedRows);

      // –Ω–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏
      const rangingRates = xmlDoc.getElementsByTagName("RangingRates")[0];
      if (rangingRates) {
        setTaxPercent(rangingRates.getAttribute("Mat") || "20");
      }
    };

    reader.readAsArrayBuffer(file);
  };

  return (
    <div className="fileimport-wrapper">
      {!onParsed && (
        <div className="fileimport__info">
          –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º <strong>xls, xlsx, gge, gsfx, xml</strong>.
          –ü–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ —É –≤—Å–µ—Ö —Ä–∞–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏
          —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏.{" "}
          <strong>
            –ï—Å–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –Ω–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–∏ —Ç–µ–≥–∏ –≤ —Å–∫—Ä–∏–ø—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å
            "–û–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é" –∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.
          </strong>
        </div>
      )}
      <Button
        styled={{ marginLeft: 25 }}
        onClick={() => {
          setOnParsed(null);
          fileInputRef.current?.click();
        }}
      >
        üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª XLS, XLSX
      </Button>
      <input
        type="file"
        ref={fileInputRef}
        accept=".xls,.xlsx"
        onChange={handleFileChange}
        className="file-upload-input"
      />
      <Button
        styled={{ marginLeft: 25 }}
        onClick={() => {
          setOnParsed(null);
          xmlInputRef.current?.click();
        }}
      >
        üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª XML, GGE, GSFX
      </Button>
      <input
        type="file"
        accept=".xml,.gge,.gsfx"
        ref={xmlInputRef}
        onChange={importFromXML}
        className="file-upload-input"
      />
      {onParsed && (
        <SecondCommercialOfferForm clearMode={clearMode} initialRows={onParsed} initialTaxRate={taxPercent} />
      )}
    </div>
  );
}

export default Fileimport;
