import { useEffect, useState, Fragment } from "react";
import "./SavedCalculators.css";
import { getSaveCalculatorResults, deleteSavedCalculator } from "../services/calculatorService";
import { SavedCalculatorData } from "../type";
import { useAppContext } from "../services/AppContext";
import Button from "../components/Button";

function SavedCalculators() {
  const [savedCalculatorData, setSavedCalculatorData] = useState<SavedCalculatorData[] | null>(null);
  const [expandedId, setExpandedId] = useState<number | null>(null);
  const { user } = useAppContext();

  const getSavedCalculatorData = async () => {
    if (!user) return;
    const userId = user.id;
    const res = await getSaveCalculatorResults(userId);
    setSavedCalculatorData(res);
  };

  const handleDelete = async (id: number | string) => {
    const confirmed = window.confirm("–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä? üóëÔ∏è");
    if (!confirmed) return;
    await deleteSavedCalculator(id);
    getSavedCalculatorData();
  };

  const handlePrint = (payload: SavedCalculatorData) => {
    const content = `
      –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${payload.title}
      –§–æ—Ä–º—É–ª–∞: ${payload.calculator.formula}
      –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${JSON.stringify(payload.input_values, null, 2)}
      –†–µ–∑—É–ª—å—Ç–∞—Ç: ${payload.result} ${payload.calculator.result_unit || ""}
    `;
    const printWindow = window.open("", "_blank");
    if (printWindow) {
      printWindow.document.write(`<pre>${content}</pre>`);
      printWindow.document.close();
      printWindow.print();
    }
  };

  useEffect(() => {
    getSavedCalculatorData();
  }, []);

  return (
    <div className="savedcalculator-container">
      <h2>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã</h2>
      {savedCalculatorData?.length ? (
        <table className="calculator-table">
          <thead>
            <tr>
              <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
              <th>–§–æ—Ä–º—É–ª–∞</th>
              <th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {savedCalculatorData.map((calc) => (
              <Fragment key={calc.id}>
                <tr>
                  <td>{calc.title}</td>
                  <td>{calc.calculator.formula}</td>
                  <td>
                    {calc.result} {calc.calculator.result_unit}
                  </td>
                  <td>
                    <div className="action-buttons">
                      <Button onClick={() => setExpandedId(expandedId === Number(calc.id) ? null : Number(calc.id))}>
                        {expandedId === Number(calc.id) ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"}
                      </Button>
                      <Button className="button_btn--red-hover" onClick={() => handleDelete(calc.id)}>
                        –£–¥–∞–ª–∏—Ç—å
                      </Button>
                      <Button onClick={() => handlePrint(calc)}>–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å</Button>
                    </div>
                  </td>
                </tr>

                {expandedId === calc.id && (
                  <tr>
                    <td colSpan={4}>
                      <div className="details">
                        <strong>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:</strong> {calc.calculator.title}
                        <strong>–§–æ—Ä–º—É–ª–∞:</strong> {calc.calculator.formula}
                        <strong>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong>
                        {calc.input_values && typeof calc.input_values === "object" ? (
                          <ul>
                            {Object.entries(calc.input_values).map(([key, value]) => {
                              const variable = calc.calculator.variables.find((v) => v.name === key);
                              return (
                                <li key={key}>
                                  {key}: {value} -- {variable?.description}
                                </li>
                              );
                            })}
                          </ul>
                        ) : (
                          <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</p>
                        )}
                        <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {calc.result} {calc.calculator.result_unit}
                      </div>
                    </td>
                  </tr>
                )}
              </Fragment>
            ))}
          </tbody>
        </table>
      ) : (
        <p>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤.</p>
      )}
    </div>
  );
}

export default SavedCalculators;
